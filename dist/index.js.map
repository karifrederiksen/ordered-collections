{"version":3,"file":"index.js","sources":["../src/internal/iterators.ts","../src/internal/redblack.ts","../src/util.ts","../src/ordmap.ts","../src/ordset.ts"],"sourcesContent":["import { NonEmptyNode, Node } from \"./redblack\"\r\n\r\nexport class ForwardIterator<k, v, b> implements Iterator<b> {\r\n    private readonly stack: Array<NonEmptyNode<k, v>>\r\n\r\n    constructor(node: Node<k, v>, private readonly f: (node: NonEmptyNode<k, v>) => b) {\r\n        if (node.isNonEmpty()) {\r\n            const stack = [node]\r\n            let n = node\r\n            while (n.left.isNonEmpty()) {\r\n                n = n.left\r\n                stack.push(n)\r\n            }\r\n            this.stack = stack\r\n        } else {\r\n            this.stack = []\r\n        }\r\n    }\r\n\r\n    next(): IteratorResult<b> {\r\n        const { stack } = this\r\n\r\n        if (stack.length === 0) return { done: true } as IteratorResult<b>\r\n\r\n        const resultNode = stack.pop()!\r\n\r\n        let node = resultNode.right\r\n        while (node.isNonEmpty()) {\r\n            stack.push(node)\r\n            node = node.left\r\n        }\r\n        return { done: false, value: this.f(resultNode) }\r\n    }\r\n}\r\n\r\nexport class ReverseIterator<k, v, b> implements Iterator<b> {\r\n    private readonly stack: Array<NonEmptyNode<k, v>>\r\n\r\n    constructor(node: Node<k, v>, private readonly f: (node: NonEmptyNode<k, v>) => b) {\r\n        if (node.isNonEmpty()) {\r\n            const stack = [node]\r\n            let n = node\r\n            while (n.right.isNonEmpty()) {\r\n                n = n.right\r\n                stack.push(n)\r\n            }\r\n            this.stack = stack\r\n        } else {\r\n            this.stack = []\r\n        }\r\n    }\r\n\r\n    next(): IteratorResult<b> {\r\n        const { stack } = this\r\n\r\n        if (stack.length === 0) return { done: true } as IteratorResult<b>\r\n\r\n        const resultNode = stack.pop()!\r\n\r\n        let node = resultNode.left\r\n        while (node.isNonEmpty()) {\r\n            stack.push(node)\r\n            node = node.right\r\n        }\r\n        return { done: false, value: this.f(resultNode) }\r\n    }\r\n}\r\n","import { LessThan } from \"../util\"\r\nimport { ForwardIterator } from \"./iterators\"\r\n\r\n/*\r\n * This is mostly a port of the scala RBT\r\n * https://github.com/scala/scala/blob/6296e324485f1d457e561824a3a8ddcafc3a08d8/src/library/scala/collection/immutable/RedBlackTree.scala\r\n */\r\n\r\nexport interface Node<k, v = void> {\r\n    size: number\r\n    color: Color\r\n    isNonEmpty(): this is NonEmptyNode<k, v>\r\n    find(compare: LessThan<k>, key: k): NonEmptyNode<k, v> | undefined\r\n    min(): NonEmptyNode<k, v> | undefined\r\n    max(): NonEmptyNode<k, v> | undefined\r\n    insert(compare: LessThan<k>, key: k, value: v): NonEmptyNode<k, v>\r\n    remove(compare: LessThan<k>, key: k): Node<k, v>\r\n}\r\n\r\ntype NodeUnion<k, v> = EmptyNode<k, v> | NonEmptyNode<k, v>\r\n\r\nconst enum Color {\r\n    Red,\r\n    Black,\r\n}\r\n\r\nexport class EmptyNode<k, v = void> implements Node<k, v> {\r\n    get size(): 0 {\r\n        return 0\r\n    }\r\n\r\n    get color(): Color.Black {\r\n        return Color.Black\r\n    }\r\n\r\n    asBlack(): EmptyNode<k, v> {\r\n        return this\r\n    }\r\n\r\n    isNonEmpty(): this is NonEmptyNode<k, v> {\r\n        return false\r\n    }\r\n\r\n    find(_compare: LessThan<k>, _key: k): NonEmptyNode<k, v> | undefined {\r\n        return undefined\r\n    }\r\n\r\n    min(): undefined {\r\n        return undefined\r\n    }\r\n\r\n    max(): undefined {\r\n        return undefined\r\n    }\r\n\r\n    insert(compare: LessThan<k>, key: k, value: v): NonEmptyNode<k, v> {\r\n        return this.ins(compare, key, value)\r\n    }\r\n\r\n    ins(_compare: LessThan<k>, key: k, value: v): NonEmptyNode<k, v> {\r\n        return NonEmptyNode.of(key, value)\r\n    }\r\n\r\n    remove(_compare: LessThan<k>, _key: k): NodeUnion<k, v> {\r\n        return this\r\n    }\r\n\r\n    rem(_compare: LessThan<k>, _key: k): NodeUnion<k, v> {\r\n        return this\r\n    }\r\n}\r\n\r\nexport const EMPTY_NODE: EmptyNode<any, any> = new EmptyNode()\r\n\r\nexport class NonEmptyNode<k, v = void> implements Node<k, v> {\r\n    static of<k, v>(key: k, value: v): NonEmptyNode<k, v> {\r\n        return new NonEmptyNode(key, value, EMPTY_NODE, EMPTY_NODE, Color.Red)\r\n    }\r\n\r\n    readonly size: number\r\n\r\n    constructor(\r\n        readonly key: k,\r\n        readonly value: v,\r\n        readonly left: NodeUnion<k, v>,\r\n        readonly right: NodeUnion<k, v>,\r\n        readonly color: Color,\r\n    ) {\r\n        this.size = left.size + right.size + 1\r\n    }\r\n\r\n    asBlack(): NonEmptyNode<k, v> {\r\n        if (this.color === Color.Black) {\r\n            return this\r\n        } else {\r\n            return new NonEmptyNode(this.key, this.value, this.left, this.right, Color.Black)\r\n        }\r\n    }\r\n\r\n    isNonEmpty(): this is NonEmptyNode<k, v> {\r\n        return true\r\n    }\r\n\r\n    find(compare: LessThan<k>, key: k): NonEmptyNode<k, v> | undefined {\r\n        let node: NodeUnion<k, v> = this\r\n        while (node.isNonEmpty()) {\r\n            if (compare(key, node.key)) node = node.left\r\n            else if (compare(node.key, key)) node = node.right\r\n            else return node\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    min(): NonEmptyNode<k, v> {\r\n        let node: NonEmptyNode<k, v> = this\r\n        while (node.left.isNonEmpty()) {\r\n            node = node.left\r\n        }\r\n        return node\r\n    }\r\n\r\n    max(): NonEmptyNode<k, v> {\r\n        let node: NonEmptyNode<k, v> = this\r\n        while (node.right.isNonEmpty()) {\r\n            node = node.right\r\n        }\r\n        return node\r\n    }\r\n\r\n    insert(compare: LessThan<k>, key: k, value: v): NonEmptyNode<k, v> {\r\n        return this.ins(compare, key, value).asBlack()\r\n    }\r\n\r\n    ins(compare: LessThan<k>, key: k, value: v): NonEmptyNode<k, v> {\r\n        if (compare(key, this.key)) {\r\n            return balanceLeft(\r\n                this.key,\r\n                this.value,\r\n                this.left.ins(compare, key, value),\r\n                this.right,\r\n                this.color,\r\n            )\r\n        }\r\n        if (compare(this.key, key)) {\r\n            return balanceRight(\r\n                this.key,\r\n                this.value,\r\n                this.left,\r\n                this.right.ins(compare, key, value),\r\n                this.color,\r\n            )\r\n        }\r\n        return new NonEmptyNode(key, value, this.left, this.right, this.color)\r\n    }\r\n\r\n    remove(compare: LessThan<k>, key: k): NodeUnion<k, v> {\r\n        return this.rem(compare, key).asBlack()\r\n    }\r\n\r\n    rem(compare: LessThan<k>, key: k): NodeUnion<k, v> {\r\n        if (compare(key, this.key)) {\r\n            if (this.left.color === Color.Black) {\r\n                return balLeft<k, v>(this.key, this.value, this.left.rem(compare, key), this\r\n                    .right as NonEmptyNode<k, v>)\r\n            }\r\n            return new NonEmptyNode(\r\n                this.key,\r\n                this.value,\r\n                this.left.rem(compare, key),\r\n                this.right,\r\n                Color.Red,\r\n            )\r\n        }\r\n\r\n        if (compare(this.key, key)) {\r\n            if (this.right.color === Color.Black) {\r\n                return balRight(\r\n                    this.key,\r\n                    this.value,\r\n                    this.left as NonEmptyNode<k, v>,\r\n                    this.right.rem(compare, key),\r\n                )\r\n            }\r\n            return new NonEmptyNode(\r\n                this.key,\r\n                this.value,\r\n                this.left,\r\n                this.right.rem(compare, key),\r\n                Color.Red,\r\n            )\r\n        }\r\n\r\n        return append(this.left, this.right)\r\n    }\r\n}\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n    ;(EmptyNode.prototype as any).toJSON = function() {\r\n        return {}\r\n    }\r\n    ;(NonEmptyNode.prototype as any).toJSON = function() {\r\n        return {\r\n            color: this.color === Color.Black ? \"Black\" : \"Red\",\r\n            key: this.key,\r\n            value: this.value,\r\n            left: this.left,\r\n            right: this.right,\r\n        }\r\n    }\r\n}\r\n\r\nfunction balance<k, v>(x: k, xv: v, tl: NodeUnion<k, v>, tr: NodeUnion<k, v>): NodeUnion<k, v> {\r\n    if (tl.color === Color.Red) {\r\n        if (tr.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                x,\r\n                xv,\r\n                new NonEmptyNode(tl.key, tl.value, tl.left, tl.right, Color.Black),\r\n                new NonEmptyNode(tr.key, tr.value, tr.left, tr.right, Color.Black),\r\n                Color.Red,\r\n            )\r\n        }\r\n        if (tl.left.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                tl.key,\r\n                tl.value,\r\n                new NonEmptyNode(\r\n                    tl.left.key,\r\n                    tl.left.value,\r\n                    tl.left.left,\r\n                    tl.left.right,\r\n                    Color.Black,\r\n                ),\r\n                new NonEmptyNode(x, xv, tl.right, tr, Color.Black),\r\n                Color.Red,\r\n            )\r\n        }\r\n        if (tl.right.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                tl.right.key,\r\n                tl.right.value,\r\n                new NonEmptyNode(tl.key, tl.value, tl.left, tl.right.left, Color.Black),\r\n                new NonEmptyNode(x, xv, tl.right.right, tr, Color.Black),\r\n                Color.Red,\r\n            )\r\n        }\r\n    } else if (tr.color === Color.Red) {\r\n        if (tr.right.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                tr.key,\r\n                tr.value,\r\n                new NonEmptyNode(x, xv, tl, tr.left, Color.Black),\r\n                new NonEmptyNode(\r\n                    tr.right.key,\r\n                    tr.right.value,\r\n                    tr.right.left,\r\n                    tr.right.right,\r\n                    Color.Black,\r\n                ),\r\n                Color.Red,\r\n            )\r\n        }\r\n        if (tr.left.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                tr.left.key,\r\n                tr.left.value,\r\n                new NonEmptyNode(x, xv, tl, tr.left.left, Color.Black),\r\n                new NonEmptyNode(tr.key, tr.value, tr.left.right, tr.right, Color.Black),\r\n                Color.Red,\r\n            )\r\n        }\r\n    }\r\n    return new NonEmptyNode(x, xv, tl, tr, Color.Black)\r\n}\r\n\r\nfunction subl<k, v>(t: NodeUnion<k, v>): NonEmptyNode<k, v> {\r\n    if (t.color === Color.Black) {\r\n        const t_ = t as NonEmptyNode<k, v>\r\n        return new NonEmptyNode(t_.key, t_.value, t_.left, t_.right, Color.Red)\r\n    }\r\n    throw \"Defect: invariance violation; expected black, got red node: \" + t\r\n}\r\n\r\nfunction balLeft<k, v>(x: k, xv: v, tl: NodeUnion<k, v>, tr: NonEmptyNode<k, v>): NodeUnion<k, v> {\r\n    if (tl.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            x,\r\n            xv,\r\n            new NonEmptyNode(tl.key, tl.value, tl.left, tl.right, Color.Black),\r\n            tr,\r\n            Color.Red,\r\n        )\r\n    }\r\n    if (tr.color === Color.Black) {\r\n        return balance(x, xv, tl, new NonEmptyNode(tr.key, tr.value, tr.left, tr.right, Color.Red))\r\n    }\r\n    if (tr.color === Color.Red && tr.left.color === Color.Black) {\r\n        const trLeft = tr.left as NonEmptyNode<k, v>\r\n\r\n        return new NonEmptyNode(\r\n            trLeft.key,\r\n            trLeft.value,\r\n            new NonEmptyNode(x, xv, tl, trLeft.left, Color.Black),\r\n            balance(tr.key, tr.value, trLeft.right, subl(tr.right)),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    throw \"Defect: invariance violation in balLeft\"\r\n}\r\n\r\nfunction balRight<k, v>(x: k, xv: v, tl: NonEmptyNode<k, v>, tr: NodeUnion<k, v>): NodeUnion<k, v> {\r\n    if (tr.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            x,\r\n            xv,\r\n            tl,\r\n            new NonEmptyNode(tr.key, tr.value, tr.left, tr.right, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n    if (tl.color === Color.Black) {\r\n        return balance(x, xv, new NonEmptyNode(tl.key, tl.value, tl.left, tl.right, Color.Red), tr)\r\n    }\r\n    if (tl.color === Color.Red && tl.right.color === Color.Black) {\r\n        const tlRight = tl.right as NonEmptyNode<k, v>\r\n\r\n        return new NonEmptyNode(\r\n            tlRight.key,\r\n            tlRight.value,\r\n            balance(tl.key, tl.value, subl(tl.left), tlRight.left),\r\n            new NonEmptyNode(x, xv, tlRight.right, tr, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    throw \"Defect: invariance violation in balRight\"\r\n}\r\n\r\nfunction append<k, v>(tl: NodeUnion<k, v>, tr: NodeUnion<k, v>): NodeUnion<k, v> {\r\n    if (!tl.isNonEmpty()) {\r\n        return tr\r\n    }\r\n    if (!tr.isNonEmpty()) {\r\n        return tl\r\n    }\r\n    if (tl.color === Color.Red && tr.color === Color.Red) {\r\n        const bc = append(tl.right, tr.left)\r\n        if (bc.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                bc.key,\r\n                bc.value,\r\n                new NonEmptyNode(tl.key, tl.value, tl.left, bc.left, Color.Red),\r\n                new NonEmptyNode(tr.key, tr.value, bc.right, tr.right, Color.Red),\r\n                Color.Red,\r\n            )\r\n        }\r\n        return new NonEmptyNode(\r\n            tl.key,\r\n            tl.value,\r\n            tl.left,\r\n            new NonEmptyNode(tr.key, tr.value, bc, tr.right, Color.Red),\r\n            Color.Red,\r\n        )\r\n    }\r\n    if (tl.color === Color.Black && tr.color === Color.Black) {\r\n        const bc = append(tl.right, tr.left)\r\n        if (bc.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                bc.key,\r\n                bc.value,\r\n                new NonEmptyNode(tl.key, tl.value, tl.left, bc.left, Color.Black),\r\n                new NonEmptyNode(tr.key, tr.value, bc.right, tr.right, Color.Black),\r\n                Color.Red,\r\n            )\r\n        }\r\n        return balLeft(\r\n            tl.key,\r\n            tl.value,\r\n            tl.left,\r\n            new NonEmptyNode(tr.key, tr.value, bc, tr.right, Color.Black),\r\n        )\r\n    }\r\n    if (tr.color === Color.Red) {\r\n        return new NonEmptyNode(tr.key, tr.value, append(tl, tr.left), tr.right, Color.Red)\r\n    }\r\n    if (tl.color === Color.Red) {\r\n        return new NonEmptyNode(tl.key, tl.value, tl.left, append(tl.right, tr), Color.Red)\r\n    }\r\n    throw \"unmatched tree on append: \" + JSON.stringify(tl) + \", \" + JSON.stringify(tr)\r\n}\r\n\r\nfunction balanceLeft<k, v>(\r\n    z: k,\r\n    zv: v,\r\n    l: NonEmptyNode<k, v>,\r\n    d: NodeUnion<k, v>,\r\n    color: Color,\r\n): NonEmptyNode<k, v> {\r\n    if (l.color === Color.Red && l.left.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            l.key,\r\n            l.value,\r\n            new NonEmptyNode(l.left.key, l.left.value, l.left.left, l.left.right, Color.Black),\r\n            new NonEmptyNode(z, zv, l.right, d, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    if (l.color === Color.Red && l.right.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            l.right.key,\r\n            l.right.value,\r\n            new NonEmptyNode(l.key, l.value, l.left, l.right.left, Color.Black),\r\n            new NonEmptyNode(z, zv, l.right.right, d, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    return new NonEmptyNode(z, zv, l, d, color)\r\n}\r\n\r\nfunction balanceRight<k, v>(\r\n    x: k,\r\n    xv: v,\r\n    a: NodeUnion<k, v>,\r\n    r: NonEmptyNode<k, v>,\r\n    color: Color,\r\n): NonEmptyNode<k, v> {\r\n    if (r.color === Color.Red && r.left.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            r.left.key,\r\n            r.left.value,\r\n            new NonEmptyNode(x, xv, a, r.left.left, Color.Black),\r\n            new NonEmptyNode(r.key, r.value, r.left.right, r.right, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n    if (r.color === Color.Red && r.right.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            r.key,\r\n            r.value,\r\n            new NonEmptyNode(x, xv, a, r.left, Color.Black),\r\n            new NonEmptyNode(r.right.key, r.right.value, r.right.left, r.right.right, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    return new NonEmptyNode(x, xv, a, r, color)\r\n}\r\n\r\n//\r\n\r\n// Development utlity\r\n\r\nexport function checkInvariants<a extends NodeUnion<unknown, unknown>>(tree_: a): void {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return\r\n    }\r\n\r\n    const tree: NodeUnion<unknown, unknown> = tree_\r\n    const errors: PushArray<string> = []\r\n\r\n    if (tree.isNonEmpty()) {\r\n        const iter = new ForwardIterator(tree, x => x)\r\n        let res = iter.next()\r\n        while (!res.done) {\r\n            checkRedParentInvariant(res.value, errors)\r\n            res = iter.next()\r\n        }\r\n        checkPathBlackCountInvariant(tree, errors)\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n        throw JSON.stringify({ errors: errors, node: tree }, undefined, 2)\r\n    }\r\n}\r\n\r\ninterface PushArray<a> extends ReadonlyArray<a> {\r\n    push(val: a): unknown\r\n}\r\n\r\nfunction checkRedParentInvariant(\r\n    tree: NodeUnion<unknown, unknown>,\r\n    errors: PushArray<string>,\r\n): void {\r\n    // if a node is red, then both its children should be black\r\n    if (tree.color === Color.Red) {\r\n        if (tree.left.color !== Color.Black) {\r\n            errors.push(\"Left child of a red node should be black\")\r\n        }\r\n        if (tree.right.color !== Color.Black) {\r\n            errors.push(\"Right child of a red node should be black\")\r\n        }\r\n    }\r\n}\r\n\r\nfunction checkPathBlackCountInvariant(\r\n    tree: NonEmptyNode<unknown, unknown>,\r\n    errors: PushArray<string>,\r\n): void {\r\n    // every path from a given node to any of its descendant Empty nodes should contain the same number of black nodes\r\n    const blackCounts: PushArray<number> = []\r\n    traverse(tree, blackCounts, 0)\r\n\r\n    const distinctBlacks = new Set(blackCounts)\r\n\r\n    if (distinctBlacks.size !== 1) {\r\n        errors.push(\r\n            `Every path to an Empty node should have the same number of black nodes in between. \r\n            Found ${distinctBlacks.size} paths lengths.`,\r\n        )\r\n    }\r\n}\r\n\r\nfunction traverse(\r\n    tree: NodeUnion<unknown, unknown>,\r\n    arr: PushArray<number>,\r\n    blackCount: number,\r\n): void {\r\n    if (!tree.isNonEmpty()) {\r\n        arr.push(blackCount)\r\n        return\r\n    }\r\n\r\n    if (tree.color === Color.Black) {\r\n        blackCount += 1\r\n    }\r\n\r\n    traverse(tree.left, arr, blackCount)\r\n    traverse(tree.right, arr, blackCount)\r\n}\r\n","export function numberLT(l: number, r: number): boolean {\r\n    if (isNaN(l)) {\r\n        return false\r\n    }\r\n    if (isNaN(r)) {\r\n        return true\r\n    }\r\n    return l < r\r\n}\r\n\r\nexport function stringLT(l: string, r: string): boolean {\r\n    return l < r\r\n}\r\n\r\nexport type LessThan<a> = (key: a, otherKey: a) => boolean\r\n\r\n// below: order functions based on the LT functions\r\n\r\nexport function compareNumber(l: number, r: number): number {\r\n    return numberLT(l, r) ? -1 : numberLT(r, l) ? 1 : 0\r\n}\r\n\r\nexport function compareString(l: string, r: string): number {\r\n    return stringLT(l, r) ? -1 : stringLT(r, l) ? 1 : 0\r\n}\r\n\r\nexport function mutablePush<a>(arr: Array<a>, val: a): Array<a> {\r\n    arr.push(val)\r\n    return arr\r\n}\r\n","import * as RBT from \"./internal/redblack\"\r\nimport { LessThan, numberLT, stringLT, mutablePush } from \"./util\"\r\nimport { ForwardIterator, ReverseIterator } from \"./internal/iterators\"\r\n\r\nexport class OrdMap<k, v> {\r\n    static empty<k, v>(compare: LessThan<k>): OrdMap<k, v> {\r\n        return new OrdMap(compare, RBT.EMPTY_NODE)\r\n    }\r\n\r\n    static of<k, v>(key: k, value: v, compare: LessThan<k>): OrdMap<k, v> {\r\n        return new OrdMap(compare, RBT.NonEmptyNode.of(key, value))\r\n    }\r\n\r\n    static from<k, v>(iterable: Iterable<[k, v]>, compare: LessThan<k>): OrdMap<k, v> {\r\n        let t = OrdMap.empty<k, v>(compare)\r\n        for (const val of iterable) {\r\n            t = t.insert(val[0], val[1])\r\n        }\r\n        return t\r\n    }\r\n\r\n    static readonly number: {\r\n        empty<v>(): OrdMap<number, v>\r\n        of<v>(key: number, value: v): OrdMap<number, v>\r\n        from<v>(iterable: Iterable<[number, v]>): OrdMap<number, v>\r\n    } = {\r\n        empty() {\r\n            return OrdMap.empty(numberLT)\r\n        },\r\n        of<v>(key: number, value: v) {\r\n            return OrdMap.of(key, value, numberLT)\r\n        },\r\n        from<v>(iterable: Iterable<[number, v]>) {\r\n            return OrdMap.from(iterable, numberLT)\r\n        },\r\n    }\r\n\r\n    static readonly string: {\r\n        empty<v>(): OrdMap<string, v>\r\n        of<v>(key: string, value: v): OrdMap<string, v>\r\n        from<v>(iterable: Iterable<[string, v]>): OrdMap<string, v>\r\n    } = {\r\n        empty() {\r\n            return OrdMap.empty(stringLT)\r\n        },\r\n        of<v>(key: string, value: v) {\r\n            return OrdMap.of(key, value, stringLT)\r\n        },\r\n        from<v>(iterable: Iterable<[string, v]>) {\r\n            return OrdMap.from(iterable, stringLT)\r\n        },\r\n    }\r\n\r\n    private constructor(\r\n        private readonly compare: LessThan<k>,\r\n        private readonly root: RBT.Node<k, v>,\r\n    ) {}\r\n\r\n    get size(): number {\r\n        return this.root.size\r\n    }\r\n\r\n    find(key: k): v | undefined {\r\n        const node = this.root.find(this.compare, key)\r\n        return node !== undefined ? node.value : undefined\r\n    }\r\n\r\n    min(): [k, v] | undefined {\r\n        const node = this.root.min()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return [node.key, node.value]\r\n    }\r\n\r\n    max(): [k, v] | undefined {\r\n        if (this.root.isNonEmpty()) return undefined\r\n        const node = this.root.max()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return [node.key, node.value]\r\n    }\r\n\r\n    insert(key: k, value: v): OrdMap<k, v> {\r\n        return new OrdMap(this.compare, this.root.insert(this.compare, key, value))\r\n    }\r\n\r\n    remove(key: k): OrdMap<k, v> {\r\n        if (this.root.find(this.compare, key) === undefined) {\r\n            return this\r\n        }\r\n        return this.unsafeRemove(key)\r\n    }\r\n\r\n    foldl<b>(f: (curr: b, next: [k, v]) => b, initial: b): b {\r\n        let node = this.root as RBT.EmptyNode<k, v> | RBT.NonEmptyNode<k, v>\r\n        if (node.isNonEmpty()) {\r\n            const stack = [node]\r\n\r\n            while (node.left.isNonEmpty()) {\r\n                node = node.left\r\n                stack.push(node)\r\n            }\r\n\r\n            while (stack.length > 0) {\r\n                const resultNode = stack.pop()!\r\n                node = resultNode.right\r\n                while (node.isNonEmpty()) {\r\n                    stack.push(node)\r\n                    node = node.left\r\n                }\r\n                initial = f(initial, [resultNode.key, resultNode.value])\r\n            }\r\n            return initial\r\n        } else {\r\n            return initial\r\n        }\r\n    }\r\n\r\n    foldr<b>(f: (curr: b, next: [k, v]) => b, initial: b): b {\r\n        let node = this.root as RBT.EmptyNode<k, v> | RBT.NonEmptyNode<k, v>\r\n        if (node.isNonEmpty()) {\r\n            const stack = [node]\r\n\r\n            while (node.right.isNonEmpty()) {\r\n                node = node.right\r\n                stack.push(node)\r\n            }\r\n\r\n            while (stack.length > 0) {\r\n                const resultNode = stack.pop()!\r\n                node = resultNode.left\r\n                while (node.isNonEmpty()) {\r\n                    stack.push(node)\r\n                    node = node.right\r\n                }\r\n                initial = f(initial, [resultNode.key, resultNode.value])\r\n            }\r\n            return initial\r\n        } else {\r\n            return initial\r\n        }\r\n    }\r\n\r\n    unsafeRemove(key: k): OrdMap<k, v> {\r\n        return new OrdMap(this.compare, this.root.remove(this.compare, key))\r\n    }\r\n\r\n    keys(): Array<k> {\r\n        return this.foldl(mutablePushKey, [])\r\n    }\r\n\r\n    values(): Array<v> {\r\n        return this.foldl(mutablePushValue, [])\r\n    }\r\n\r\n    difference(other: OrdMap<k, v>): OrdMap<k, v> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newMap = OrdMap.empty<k, v>(this.compare)\r\n\r\n        newMap = this.foldl(\r\n            (map, val) => (other.find(val[0]) === undefined ? map.insert(val[0], val[1]) : map),\r\n            newMap,\r\n        )\r\n\r\n        newMap = other.foldl(\r\n            (map, val) => (this.find(val[0]) === undefined ? map.insert(val[0], val[1]) : map),\r\n            newMap,\r\n        )\r\n\r\n        return newMap\r\n    }\r\n\r\n    toArray(): Array<[k, v]> {\r\n        return this.foldl(mutablePush, [])\r\n    }\r\n\r\n    toJSON(): unknown {\r\n        return this.toArray()\r\n    }\r\n\r\n    reverseIterator(): Iterator<[k, v]> {\r\n        return new ReverseIterator(this.root, getKvp)\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<[k, v]> {\r\n        return new ForwardIterator(this.root, getKvp)\r\n    }\r\n}\r\n\r\nfunction mutablePushKey<k, v>(arr: Array<k>, val: [k, v]): Array<k> {\r\n    arr.push(val[0])\r\n    return arr\r\n}\r\nfunction mutablePushValue<k, v>(arr: Array<v>, val: [k, v]): Array<v> {\r\n    arr.push(val[1])\r\n    return arr\r\n}\r\n\r\nfunction getKvp<k, v>(node: RBT.NonEmptyNode<k, v>): [k, v] {\r\n    return [node.key, node.value]\r\n}\r\n\r\nfunction checkComparisonFuncEquality<a>(f1: LessThan<a>, f2: LessThan<a>): void {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (f1 !== f2) {\r\n            console.warn(\r\n                \"You're merging two maps with different compare functions. This can lead to inconsistent results.\\n\\nConsider using the same comparison function for both maps.\",\r\n            )\r\n        }\r\n    }\r\n}\r\n","import * as RBT from \"./internal/redblack\"\r\nimport { LessThan, numberLT, stringLT, mutablePush } from \"./util\"\r\nimport { ForwardIterator, ReverseIterator } from \"./internal/iterators\"\r\n\r\nexport class OrdSet<a> {\r\n    static empty<a>(compare: LessThan<a>): OrdSet<a> {\r\n        return new OrdSet<a>(compare, RBT.EMPTY_NODE)\r\n    }\r\n\r\n    static of<a>(value: a, compare: LessThan<a>): OrdSet<a> {\r\n        return new OrdSet(compare, RBT.NonEmptyNode.of(value, undefined))\r\n    }\r\n\r\n    static from<a>(iterable: Iterable<a>, compare: LessThan<a>): OrdSet<a> {\r\n        let t = OrdSet.empty<a>(compare)\r\n        for (const val of iterable) {\r\n            t = t.insert(val)\r\n        }\r\n        return t\r\n    }\r\n\r\n    static readonly number: {\r\n        empty(): OrdSet<number>\r\n        of(val: number): OrdSet<number>\r\n        from(iterable: Iterable<number>): OrdSet<number>\r\n    } = {\r\n        empty() {\r\n            return OrdSet.empty(numberLT)\r\n        },\r\n        of(value: number) {\r\n            return OrdSet.of(value, numberLT)\r\n        },\r\n        from(iterable: Iterable<number>) {\r\n            return OrdSet.from(iterable, numberLT)\r\n        },\r\n    }\r\n\r\n    static readonly string: {\r\n        empty(): OrdSet<string>\r\n        of(val: string): OrdSet<string>\r\n        from(iterable: Iterable<string>): OrdSet<string>\r\n    } = {\r\n        empty() {\r\n            return OrdSet.empty(stringLT)\r\n        },\r\n        of(value: string) {\r\n            return OrdSet.of(value, stringLT)\r\n        },\r\n        from(iterable: Iterable<string>) {\r\n            return OrdSet.from(iterable, stringLT)\r\n        },\r\n    }\r\n\r\n    private constructor(\r\n        private readonly compare: LessThan<a>,\r\n        private readonly root: RBT.Node<a, void>,\r\n    ) {}\r\n\r\n    get size(): number {\r\n        return this.root.size\r\n    }\r\n\r\n    has(key: a): boolean {\r\n        return this.root.isNonEmpty() ? this.root.find(this.compare, key) !== undefined : false\r\n    }\r\n\r\n    min(): a | undefined {\r\n        const node = this.root.min()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return node.key\r\n    }\r\n\r\n    max(): a | undefined {\r\n        const node = this.root.max()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return node.key\r\n    }\r\n\r\n    insert(value: a): OrdSet<a> {\r\n        return new OrdSet(this.compare, this.root.insert(this.compare, value, undefined))\r\n    }\r\n\r\n    remove(key: a): OrdSet<a> {\r\n        if (this.root.find(this.compare, key) === undefined) {\r\n            return this\r\n        }\r\n        return new OrdSet(this.compare, this.root.remove(this.compare, key))\r\n    }\r\n\r\n    foldl<b>(f: (curr: b, next: a) => b, initial: b): b {\r\n        let node = this.root as RBT.EmptyNode<a, void> | RBT.NonEmptyNode<a, void>\r\n        if (node.isNonEmpty()) {\r\n            const stack = [node]\r\n\r\n            while (node.left.isNonEmpty()) {\r\n                node = node.left\r\n                stack.push(node)\r\n            }\r\n\r\n            while (stack.length > 0) {\r\n                const resultNode = stack.pop()!\r\n                node = resultNode.right\r\n                while (node.isNonEmpty()) {\r\n                    stack.push(node)\r\n                    node = node.left\r\n                }\r\n                initial = f(initial, resultNode.key)\r\n            }\r\n            return initial\r\n        } else {\r\n            return initial\r\n        }\r\n    }\r\n\r\n    foldr<b>(f: (curr: b, next: a) => b, initial: b): b {\r\n        let node = this.root as RBT.EmptyNode<a, void> | RBT.NonEmptyNode<a, void>\r\n        if (node.isNonEmpty()) {\r\n            const stack = [node]\r\n\r\n            while (node.right.isNonEmpty()) {\r\n                node = node.right\r\n                stack.push(node)\r\n            }\r\n\r\n            while (stack.length > 0) {\r\n                const resultNode = stack.pop()!\r\n                node = resultNode.left\r\n                while (node.isNonEmpty()) {\r\n                    stack.push(node)\r\n                    node = node.right\r\n                }\r\n                initial = f(initial, resultNode.key)\r\n            }\r\n            return initial\r\n        } else {\r\n            return initial\r\n        }\r\n    }\r\n\r\n    union(other: OrdSet<a>): OrdSet<a> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newSet = OrdSet.empty(this.compare)\r\n\r\n        newSet = this.foldl((set, val) => set.insert(val), newSet)\r\n        newSet = other.foldl((set, val) => set.insert(val), newSet)\r\n\r\n        return newSet\r\n    }\r\n\r\n    intersect(other: OrdSet<a>): OrdSet<a> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newSet = OrdSet.empty(this.compare)\r\n\r\n        newSet = other.foldl((set, val) => (this.has(val) ? set.insert(val) : set), newSet)\r\n\r\n        return newSet\r\n    }\r\n\r\n    difference(other: OrdSet<a>): OrdSet<a> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newSet = OrdSet.empty(this.compare)\r\n\r\n        newSet = this.foldl((set, val) => (other.has(val) ? set : set.insert(val)), newSet)\r\n\r\n        newSet = this.foldl((set, val) => (this.has(val) ? set : set.insert(val)), newSet)\r\n\r\n        return newSet\r\n    }\r\n\r\n    toArray(): Array<a> {\r\n        return this.foldl(mutablePush, [])\r\n    }\r\n\r\n    toJSON(): unknown {\r\n        return this.toArray()\r\n    }\r\n\r\n    reverseIterator(): Iterator<a> {\r\n        return new ReverseIterator(this.root, getKey)\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<a> {\r\n        return new ForwardIterator(this.root, getKey)\r\n    }\r\n}\r\n\r\nfunction getKey<a>(node: RBT.NonEmptyNode<a>): a {\r\n    return node.key\r\n}\r\n\r\nfunction checkComparisonFuncEquality<a>(f1: LessThan<a>, f2: LessThan<a>): void {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (f1 !== f2) {\r\n            console.warn(\r\n                \"You're merging two sets with different compare functions. This can lead to inconsistent results.\\n\\nConsider using the same comparison function for both sets.\",\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"names":["RBT.EMPTY_NODE","RBT.NonEmptyNode","checkComparisonFuncEquality"],"mappings":"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"}