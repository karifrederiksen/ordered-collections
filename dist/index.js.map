{"version":3,"file":"index.js","sources":["../src/internal/redblack.ts","../src/util.ts","../src/internal/iterators.ts","../src/ordmap.ts","../src/ordset.ts"],"sourcesContent":["import { Comp } from \"../util\"\r\n\r\n/*\r\n * This is mostly a port of the scala RBT\r\n * https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_9_0_final/src//library/scala/collection/immutable/RedBlack.scala#L1\r\n */\r\n\r\nexport interface Node<k, v = void> {\r\n    size: number\r\n    color: Color\r\n    isNonEmpty(): this is NonEmptyNode<k, v>\r\n    find(compare: Comp<k>, key: k): NonEmptyNode<k, v> | undefined\r\n    min(): NonEmptyNode<k, v> | undefined\r\n    max(): NonEmptyNode<k, v> | undefined\r\n    insert(compare: Comp<k>, key: k, value: v): NonEmptyNode<k, v>\r\n    remove(compare: Comp<k>, key: k): Node<k, v>\r\n}\r\n\r\ntype NodeUnion<k, v> = EmptyNode<k, v> | NonEmptyNode<k, v>\r\n\r\nconst enum Color {\r\n    Red,\r\n    Black,\r\n}\r\n\r\nexport class EmptyNode<k, v = void> implements Node<k, v> {\r\n    get size(): 0 {\r\n        return 0\r\n    }\r\n\r\n    get color(): Color.Black {\r\n        return Color.Black\r\n    }\r\n\r\n    isNonEmpty(): this is NonEmptyNode<k, v> {\r\n        return false\r\n    }\r\n\r\n    find<k, v>(_compare: Comp<k>, _key: k): NonEmptyNode<k, v> | undefined {\r\n        return undefined\r\n    }\r\n\r\n    min(): undefined {\r\n        return undefined\r\n    }\r\n\r\n    max(): undefined {\r\n        return undefined\r\n    }\r\n\r\n    insert(_compare: Comp<k>, key: k, value: v): NonEmptyNode<k, v> {\r\n        return NonEmptyNode.of(key, value)\r\n    }\r\n\r\n    remove(_compare: Comp<k>, _key: k): NodeUnion<k, v> {\r\n        return this\r\n    }\r\n}\r\n\r\nexport const EMPTY_NODE: EmptyNode<any, any> = new EmptyNode()\r\n\r\nexport class NonEmptyNode<k, v = void> implements Node<k, v> {\r\n    static of<k, v>(key: k, value: v): NonEmptyNode<k, v> {\r\n        return new NonEmptyNode(key, value, EMPTY_NODE, EMPTY_NODE, Color.Red)\r\n    }\r\n\r\n    readonly size: number\r\n\r\n    constructor(\r\n        readonly key: k,\r\n        readonly value: v,\r\n        readonly left: NodeUnion<k, v>,\r\n        readonly right: NodeUnion<k, v>,\r\n        readonly color: Color,\r\n    ) {\r\n        this.size = left.size + right.size + 1\r\n    }\r\n\r\n    isNonEmpty(): this is NonEmptyNode<k, v> {\r\n        return true\r\n    }\r\n\r\n    find(compare: Comp<k>, key: k): NonEmptyNode<k, v> | undefined {\r\n        let node: NodeUnion<k, v> = this\r\n        while (node.isNonEmpty()) {\r\n            const c = compare(key, node.key)\r\n            if (c < 0) node = node.left\r\n            else if (c > 0) node = node.right\r\n            else return node\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    min(): NonEmptyNode<k, v> {\r\n        let node: NonEmptyNode<k, v> = this\r\n        while (node.left.isNonEmpty()) {\r\n            node = node.left\r\n        }\r\n        return node\r\n    }\r\n\r\n    max(): NonEmptyNode<k, v> {\r\n        let node: NonEmptyNode<k, v> = this\r\n        while (node.right.isNonEmpty()) {\r\n            node = node.right\r\n        }\r\n        return node\r\n    }\r\n\r\n    insert(compare: Comp<k>, key: k, value: v): NonEmptyNode<k, v> {\r\n        const c = compare(key, this.key)\r\n\r\n        if (c < 0)\r\n            return insert_balanceLeft(\r\n                this.key,\r\n                this.value,\r\n                this.left.insert(compare, key, value),\r\n                this.right,\r\n                this.color,\r\n            )\r\n\r\n        if (c > 0)\r\n            return insert_balanceRight(\r\n                this.key,\r\n                this.value,\r\n                this.left,\r\n                this.right.insert(compare, key, value),\r\n                this.color,\r\n            )\r\n\r\n        return new NonEmptyNode(key, value, this.left, this.right, this.color)\r\n    }\r\n\r\n    remove(compare: Comp<k>, key: k): NodeUnion<k, v> {\r\n        const c = compare(key, this.key)\r\n\r\n        if (c < 0) {\r\n            return remove_balLeft(this.key, this.value, this.left.remove(compare, key), this\r\n                .right as NonEmptyNode<k, v>)\r\n        }\r\n\r\n        if (c > 0) {\r\n            return remove_balRight(\r\n                this.key,\r\n                this.value,\r\n                this.left as NonEmptyNode<k, v>,\r\n                this.right.remove(compare, key),\r\n            )\r\n        }\r\n\r\n        return remove_append(this.left, this.right)\r\n    }\r\n}\r\n\r\nfunction blacken<k, v>(node: NonEmptyNode<k, v>): NonEmptyNode<k, v> {\r\n    if (node.color === Color.Red) {\r\n        return new NonEmptyNode(node.key, node.value, node.left, node.right, Color.Black)\r\n    }\r\n    return node\r\n}\r\n\r\nfunction insert_balanceLeft<k, v>(\r\n    z: k,\r\n    zv: v,\r\n    l: NonEmptyNode<k, v>,\r\n    d: NodeUnion<k, v>,\r\n    color: Color,\r\n): NonEmptyNode<k, v> {\r\n    if (l.color === Color.Red && l.left.color === Color.Red) {\r\n        const newLeft = new NonEmptyNode(\r\n            l.left.key,\r\n            l.left.value,\r\n            l.left.left,\r\n            l.left.right,\r\n            Color.Black,\r\n        )\r\n        const newRight = new NonEmptyNode(z, zv, l.right, d, Color.Black)\r\n        return new NonEmptyNode(l.key, l.value, newLeft, newRight, Color.Red)\r\n    }\r\n    if (l.color === Color.Red && l.right.color === Color.Red) {\r\n        const newLeft = new NonEmptyNode(l.key, l.value, l.left, l.right.left, Color.Black)\r\n        const newRight = new NonEmptyNode(z, zv, l.right.right, d, Color.Black)\r\n        return new NonEmptyNode(l.right.key, l.right.value, newLeft, newRight, Color.Red)\r\n    }\r\n\r\n    return new NonEmptyNode(z, zv, l, d, color)\r\n}\r\n\r\nfunction insert_balanceRight<k, v>(\r\n    x: k,\r\n    xv: v,\r\n    a: NodeUnion<k, v>,\r\n    r: NonEmptyNode<k, v>,\r\n    color: Color,\r\n): NonEmptyNode<k, v> {\r\n    if (r.color === Color.Red && r.left.color === Color.Red) {\r\n        const newLeft = new NonEmptyNode(x, xv, a, r.left.left, Color.Black)\r\n        const newRight = new NonEmptyNode(r.key, r.value, r.left.right, r.right, Color.Black)\r\n        return new NonEmptyNode(r.left.key, r.left.value, newLeft, newRight, Color.Red)\r\n    }\r\n    if (r.color === Color.Red && r.right.color === Color.Red) {\r\n        const newLeft = new NonEmptyNode(x, xv, a, r.left, Color.Black)\r\n        const newRight = new NonEmptyNode(\r\n            r.right.key,\r\n            r.right.value,\r\n            r.right.left,\r\n            r.right.right,\r\n            Color.Black,\r\n        )\r\n        return new NonEmptyNode(r.key, r.value, newLeft, newRight, Color.Red)\r\n    }\r\n\r\n    return new NonEmptyNode(x, xv, a, r, color)\r\n}\r\n\r\nfunction remove_balance<k, v>(\r\n    x: k,\r\n    xv: v,\r\n    tl: NodeUnion<k, v>,\r\n    tr: NodeUnion<k, v>,\r\n): NodeUnion<k, v> {\r\n    if (tl.color === Color.Red && tr.color === Color.Red) {\r\n        return new NonEmptyNode(x, xv, blacken(tl), blacken(tr), Color.Red)\r\n    }\r\n\r\n    if (tl.color === Color.Red && tl.left.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            tl.key,\r\n            tl.value,\r\n            blacken(tl.left),\r\n            new NonEmptyNode(x, xv, tl.left.right, tr, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    if (tl.color === Color.Red && tl.right.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            tl.right.key,\r\n            tl.right.value,\r\n            new NonEmptyNode(tl.key, tl.value, tl.left, tl.right.left, Color.Black),\r\n            new NonEmptyNode(x, xv, tl.right.left, tl.right.right, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    if (tr.color === Color.Red && tr.right.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            tr.key,\r\n            tr.value,\r\n            new NonEmptyNode(x, xv, tl, tr.left, Color.Black),\r\n            blacken(tr.right),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    if (tr.color === Color.Red && tr.left.color === Color.Red) {\r\n        return new NonEmptyNode(\r\n            tr.left.key,\r\n            tr.left.value,\r\n            new NonEmptyNode(x, xv, tl, tr.left.left, Color.Black),\r\n            new NonEmptyNode(tr.key, tr.value, tr.left.right, tr.right, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    return new NonEmptyNode(x, xv, tl, tr, Color.Black)\r\n}\r\n\r\nfunction remove_subl<k, v>(node: NonEmptyNode<k, v>): NonEmptyNode<k, v> {\r\n    if (node.color === Color.Black) {\r\n        return new NonEmptyNode(node.key, node.value, node.left, node.right, Color.Red)\r\n    }\r\n    throw \"Invariance violation. Expected black, got red\"\r\n}\r\n\r\nfunction remove_balLeft<k, v>(\r\n    x: k,\r\n    xv: v,\r\n    tl: NodeUnion<k, v>,\r\n    tr: NonEmptyNode<k, v>,\r\n): NodeUnion<k, v> {\r\n    if (tl.color === Color.Red) {\r\n        return new NonEmptyNode(x, xv, blacken(tl), tr, Color.Red)\r\n    }\r\n\r\n    if (tr.color === Color.Black) {\r\n        return remove_balance(\r\n            x,\r\n            xv,\r\n            tl,\r\n            new NonEmptyNode(tr.key, tr.value, tr.left, tr.right, Color.Red),\r\n        )\r\n    }\r\n\r\n    if (tr.color && !tr.left.color) {\r\n        const rightLeft = tr.left as NonEmptyNode<k, v>\r\n        const rightRight = tr.right as NonEmptyNode<k, v>\r\n\r\n        return new NonEmptyNode(\r\n            rightLeft.key,\r\n            rightLeft.value,\r\n            new NonEmptyNode(x, xv, tl, rightLeft.left, Color.Black),\r\n            remove_balance(\r\n                tr.key,\r\n                tr.value,\r\n                rightLeft.right as NonEmptyNode<k, v>,\r\n                remove_subl(rightRight),\r\n            ),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    throw \"Invariance violation.\"\r\n}\r\n\r\nfunction remove_balRight<k, v>(\r\n    x: k,\r\n    xv: v,\r\n    tl: NonEmptyNode<k, v>,\r\n    tr: NodeUnion<k, v>,\r\n): NodeUnion<k, v> {\r\n    if (tr.color === Color.Red) {\r\n        return new NonEmptyNode(x, xv, tl, blacken(tr), Color.Red)\r\n    }\r\n\r\n    if (tl.color === Color.Black) {\r\n        return remove_balance(x, xv, tl, tr)\r\n    }\r\n\r\n    if (tl.color === Color.Red && tl.right.color === Color.Black) {\r\n        const leftLeft = tl.left as NonEmptyNode<k, v>\r\n        const leftRight = tl.right as NonEmptyNode<k, v>\r\n\r\n        return new NonEmptyNode(\r\n            leftRight.key,\r\n            leftRight.value,\r\n            remove_balance(tl.key, tl.value, remove_subl(leftLeft), leftRight.left as NonEmptyNode<\r\n                k,\r\n                v\r\n            >),\r\n            new NonEmptyNode(x, xv, leftRight.right, tr, Color.Black),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    throw \"Invariance violation.\"\r\n}\r\n\r\nfunction remove_append<k, v>(tl: NodeUnion<k, v>, tr: NodeUnion<k, v>): NodeUnion<k, v> {\r\n    if (!tl.isNonEmpty()) return tr\r\n    if (!tr.isNonEmpty()) return tl\r\n\r\n    if (tl.color === Color.Red && tr.color === Color.Red) {\r\n        const res = remove_append(tl.right, tr.left)\r\n\r\n        if (res.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                res.key,\r\n                res.value,\r\n                new NonEmptyNode(tl.key, tl.value, tl.left, res.left, Color.Red),\r\n                new NonEmptyNode(tr.key, tr.value, res.right, tr.right, Color.Red),\r\n                Color.Red,\r\n            )\r\n        }\r\n\r\n        return new NonEmptyNode(\r\n            tl.key,\r\n            tl.value,\r\n            tl.left,\r\n            new NonEmptyNode(tr.key, tr.value, res, tr.right, Color.Red),\r\n            Color.Red,\r\n        )\r\n    }\r\n\r\n    if (tl.color === Color.Black && tr.color === Color.Black) {\r\n        const res = remove_append(tl.right, tr.left)\r\n\r\n        if (res.color === Color.Red) {\r\n            return new NonEmptyNode(\r\n                res.key,\r\n                res.value,\r\n                new NonEmptyNode(tl.key, tl.value, tl.left, res.left, Color.Black),\r\n                new NonEmptyNode(tr.key, tr.value, res.right, tr.right, Color.Black),\r\n                Color.Red,\r\n            )\r\n        }\r\n\r\n        return remove_balLeft(\r\n            tl.key,\r\n            tl.value,\r\n            tl.left as NonEmptyNode<k, v>,\r\n            new NonEmptyNode(tr.key, tr.value, res, tr.right, Color.Black),\r\n        )\r\n    }\r\n\r\n    if (tr.color === Color.Red) {\r\n        return new NonEmptyNode(tr.key, tr.value, remove_append(tl, tr.left), tr.right, Color.Red)\r\n    }\r\n\r\n    return new NonEmptyNode(tl.key, tl.value, tl.left, remove_append(tl.right, tr), Color.Red)\r\n}\r\n","export function compareNumber(l: number, r: number): number {\r\n    if (isNaN(l)) {\r\n        if (isNaN(r)) {\r\n            return 0\r\n        }\r\n        return 1\r\n    }\r\n    if (isNaN(r)) {\r\n        return -1\r\n    }\r\n    return l < r ? -1 : r < l ? 1 : 0\r\n}\r\n\r\nexport function compareString(l: string, r: string): number {\r\n    return l < r ? -1 : r < l ? 1 : 0\r\n}\r\n\r\nexport type Comp<a> = (key: a, otherKey: a) => number\r\n","import { NonEmptyNode } from \"./redblack\"\r\n\r\nexport class ForwardIterator<k, v, b> implements Iterator<b> {\r\n    private readonly stack: Array<NonEmptyNode<k, v>>\r\n\r\n    constructor(node: NonEmptyNode<k, v>, private readonly f: (node: NonEmptyNode<k, v>) => b) {\r\n        const stack: Array<NonEmptyNode<k, v>> = [node]\r\n        let n = node\r\n        while (n.left.isNonEmpty()) {\r\n            n = n.left\r\n            stack.push(n)\r\n        }\r\n        this.stack = stack\r\n    }\r\n\r\n    next(): IteratorResult<b> {\r\n        const { stack } = this\r\n\r\n        if (stack.length === 0) return { done: true } as IteratorResult<b>\r\n\r\n        const resultNode = stack.pop()!\r\n\r\n        let node = resultNode.right\r\n        while (node.isNonEmpty()) {\r\n            stack.push(node)\r\n            node = node.left\r\n        }\r\n        return { done: false, value: this.f(resultNode) }\r\n    }\r\n}\r\n\r\nexport class ReverseIterator<k, v, b> implements Iterator<b> {\r\n    private readonly stack: Array<NonEmptyNode<k, v>>\r\n\r\n    constructor(node: NonEmptyNode<k, v>, private readonly f: (node: NonEmptyNode<k, v>) => b) {\r\n        const stack: Array<NonEmptyNode<k, v>> = [node]\r\n        let n = node\r\n        while (n.right.isNonEmpty()) {\r\n            n = n.right\r\n            stack.push(n)\r\n        }\r\n        this.stack = stack\r\n    }\r\n\r\n    next(): IteratorResult<b> {\r\n        const { stack } = this\r\n\r\n        if (stack.length === 0) return { done: true } as IteratorResult<b>\r\n\r\n        const resultNode = stack.pop()!\r\n\r\n        let node = resultNode.left\r\n        while (node.isNonEmpty()) {\r\n            stack.push(node)\r\n            node = node.right\r\n        }\r\n        return { done: false, value: this.f(resultNode) }\r\n    }\r\n}\r\n\r\nexport const EMPTY_ITER: Iterator<any> = {\r\n    next: () => ({ done: true } as IteratorResult<any>),\r\n}\r\n","import * as RBT from \"./internal/redblack\"\r\nimport { Comp, compareNumber, compareString } from \"./util\"\r\nimport { ForwardIterator, EMPTY_ITER, ReverseIterator } from \"./internal/iterators\"\r\n\r\nexport class OrdMap<k, v> {\r\n    static empty<k, v>(compare: Comp<k>): OrdMap<k, v> {\r\n        return new OrdMap(compare, RBT.EMPTY_NODE)\r\n    }\r\n\r\n    static emptyNumberKeyed<v>(): OrdMap<number, v> {\r\n        return OrdMap.empty(compareNumber)\r\n    }\r\n\r\n    static emptyStringKeyed<v>(): OrdMap<string, v> {\r\n        return OrdMap.empty(compareString)\r\n    }\r\n\r\n    static of<k, v>(key: k, value: v, compare: Comp<k>): OrdMap<k, v> {\r\n        return new OrdMap(compare, RBT.NonEmptyNode.of(key, value))\r\n    }\r\n\r\n    static ofNumberKeyed<v>(key: number, value: v): OrdMap<number, v> {\r\n        return OrdMap.of(key, value, compareNumber)\r\n    }\r\n\r\n    static ofStringKeyed<v>(key: string, value: v): OrdMap<string, v> {\r\n        return OrdMap.of(key, value, compareString)\r\n    }\r\n\r\n    static from<k, v>(iterable: Iterable<[k, v]>, compare: Comp<k>): OrdMap<k, v> {\r\n        let t = OrdMap.empty<k, v>(compare)\r\n        for (const val of iterable) {\r\n            t = t.insert(val[0], val[1])\r\n        }\r\n        return t\r\n    }\r\n\r\n    static fromNumberKeyed<v>(iterable: Iterable<[number, v]>): OrdMap<number, v> {\r\n        return OrdMap.from(iterable, compareNumber)\r\n    }\r\n\r\n    static fromStringKeyed<v>(iterable: Iterable<[string, v]>): OrdMap<string, v> {\r\n        return OrdMap.from(iterable, compareString)\r\n    }\r\n\r\n    private constructor(private readonly compare: Comp<k>, private readonly root: RBT.Node<k, v>) {}\r\n\r\n    get size(): number {\r\n        return this.root.size\r\n    }\r\n\r\n    find(key: k): v | undefined {\r\n        const node = this.root.find(this.compare, key)\r\n        return node !== undefined ? node.value : undefined\r\n    }\r\n\r\n    min(): [k, v] | undefined {\r\n        const node = this.root.min()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return [node.key, node.value]\r\n    }\r\n\r\n    max(): [k, v] | undefined {\r\n        if (this.root.isNonEmpty()) return undefined\r\n        const node = this.root.max()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return [node.key, node.value]\r\n    }\r\n\r\n    insert(key: k, value: v): OrdMap<k, v> {\r\n        return new OrdMap(this.compare, this.root.insert(this.compare, key, value))\r\n    }\r\n\r\n    remove(key: k): OrdMap<k, v> {\r\n        return new OrdMap(this.compare, this.root.remove(this.compare, key))\r\n    }\r\n\r\n    keys(): Array<k> {\r\n        const arr: Array<k> = []\r\n        for (const val of this) {\r\n            arr.push(val[0])\r\n        }\r\n        return arr\r\n    }\r\n\r\n    values(): Array<v> {\r\n        const arr: Array<v> = []\r\n        for (const val of this) {\r\n            arr.push(val[1])\r\n        }\r\n        return arr\r\n    }\r\n\r\n    difference(other: OrdMap<k, v>): OrdMap<k, v> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newMap = OrdMap.empty<k, v>(this.compare)\r\n\r\n        for (const val of this) {\r\n            if (other.find(val[0]) === undefined) {\r\n                newMap = newMap.insert(val[0], val[1])\r\n            }\r\n        }\r\n\r\n        for (const val of other) {\r\n            if (this.find(val[0]) === undefined) {\r\n                newMap = newMap.insert(val[0], val[1])\r\n            }\r\n        }\r\n\r\n        return newMap\r\n    }\r\n\r\n    toArray(): Array<[k, v]> {\r\n        const arr: Array<[k, v]> = []\r\n        for (const val of this) {\r\n            arr.push(val as [k, v])\r\n        }\r\n        return arr\r\n    }\r\n\r\n    toJSON(): unknown {\r\n        return this.toArray()\r\n    }\r\n\r\n    reverseIterator(): Iterator<[k, v]> {\r\n        if (!this.root.isNonEmpty()) return EMPTY_ITER\r\n        return new ReverseIterator(this.root, getKvp)\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<[k, v]> {\r\n        if (!this.root.isNonEmpty()) return EMPTY_ITER\r\n        return new ForwardIterator(this.root, getKvp)\r\n    }\r\n}\r\n\r\nfunction getKvp<k, v>(node: RBT.NonEmptyNode<k, v>): [k, v] {\r\n    return [node.key, node.value]\r\n}\r\n\r\nfunction checkComparisonFuncEquality<a>(f1: Comp<a>, f2: Comp<a>): void {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (f1 !== f2) {\r\n            console.warn(\r\n                \"You're merging two maps with different compare functions. This can lead to inconsistent results.\\n\\nConsider using the same comparison function for both maps.\",\r\n            )\r\n        }\r\n    }\r\n}\r\n","import * as RBT from \"./internal/redblack\"\r\nimport { Comp, compareNumber, compareString } from \"./util\"\r\nimport { ForwardIterator, EMPTY_ITER, ReverseIterator } from \"./internal/iterators\"\r\n\r\nexport class OrdSet<a> {\r\n    static empty<a>(compare: Comp<a>): OrdSet<a> {\r\n        return new OrdSet<a>(compare, RBT.EMPTY_NODE)\r\n    }\r\n\r\n    static emptyNumber(): OrdSet<number> {\r\n        return OrdSet.empty(compareNumber)\r\n    }\r\n\r\n    static emptyString(): OrdSet<string> {\r\n        return OrdSet.empty(compareString)\r\n    }\r\n\r\n    static of<a>(value: a, compare: Comp<a>): OrdSet<a> {\r\n        return new OrdSet(compare, RBT.NonEmptyNode.of(value, undefined))\r\n    }\r\n\r\n    static ofNumber(value: number): OrdSet<number> {\r\n        return OrdSet.of(value, compareNumber)\r\n    }\r\n\r\n    static ofString(value: string): OrdSet<string> {\r\n        return OrdSet.of(value, compareString)\r\n    }\r\n\r\n    static from<a>(iterable: Iterable<a>, compare: Comp<a>): OrdSet<a> {\r\n        let t = OrdSet.empty<a>(compare)\r\n        for (const val of iterable) {\r\n            t = t.insert(val)\r\n        }\r\n        return t\r\n    }\r\n\r\n    static fromNumbers(iterable: Iterable<number>): OrdSet<number> {\r\n        return OrdSet.from(iterable, compareNumber)\r\n    }\r\n\r\n    static fromStrings(iterable: Iterable<string>): OrdSet<string> {\r\n        return OrdSet.from(iterable, compareString)\r\n    }\r\n\r\n    private constructor(\r\n        private readonly compare: Comp<a>,\r\n        private readonly root: RBT.Node<a, void>,\r\n    ) {}\r\n\r\n    get size(): number {\r\n        return this.root.size\r\n    }\r\n\r\n    has(key: a): boolean {\r\n        return this.root.isNonEmpty() ? false : this.root.find(this.compare, key) !== undefined\r\n    }\r\n\r\n    min(): a | undefined {\r\n        const node = this.root.min()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return node.key\r\n    }\r\n\r\n    max(): a | undefined {\r\n        const node = this.root.max()\r\n        if (node === undefined) {\r\n            return undefined\r\n        }\r\n        return node.key\r\n    }\r\n\r\n    insert(value: a): OrdSet<a> {\r\n        return new OrdSet(this.compare, this.root.insert(this.compare, value, undefined))\r\n    }\r\n\r\n    remove(key: a): OrdSet<a> {\r\n        return new OrdSet(this.compare, this.root.remove(this.compare, key))\r\n    }\r\n\r\n    union(other: OrdSet<a>): OrdSet<a> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newSet = OrdSet.empty(this.compare)\r\n\r\n        for (const val of this) {\r\n            newSet = newSet.insert(val)\r\n        }\r\n\r\n        for (const val of other) {\r\n            newSet = newSet.insert(val)\r\n        }\r\n\r\n        return newSet\r\n    }\r\n\r\n    intersect(other: OrdSet<a>): OrdSet<a> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newSet = OrdSet.empty(this.compare)\r\n\r\n        for (const val of other) {\r\n            if (this.has(val)) {\r\n                newSet = newSet.insert(val)\r\n            }\r\n        }\r\n\r\n        return newSet\r\n    }\r\n\r\n    difference(other: OrdSet<a>): OrdSet<a> {\r\n        checkComparisonFuncEquality(this.compare, other.compare)\r\n        let newSet = OrdSet.empty(this.compare)\r\n\r\n        for (const val of this) {\r\n            if (!other.has(val)) {\r\n                newSet = newSet.insert(val)\r\n            }\r\n        }\r\n\r\n        for (const val of other) {\r\n            if (!this.has(val)) {\r\n                newSet = newSet.insert(val)\r\n            }\r\n        }\r\n\r\n        return newSet\r\n    }\r\n\r\n    toArray(): Array<a> {\r\n        const arr: Array<a> = []\r\n        for (const val of this) {\r\n            arr.push(val)\r\n        }\r\n        return arr\r\n    }\r\n\r\n    toJSON(): unknown {\r\n        return this.toArray()\r\n    }\r\n\r\n    reverseIterator(): Iterator<a> {\r\n        if (!this.root.isNonEmpty()) return EMPTY_ITER\r\n        return new ReverseIterator(this.root, getKey)\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<a> {\r\n        if (!this.root.isNonEmpty()) return EMPTY_ITER\r\n        return new ForwardIterator(this.root, getKey)\r\n    }\r\n}\r\n\r\nfunction getKey<a>(node: RBT.NonEmptyNode<a>): a {\r\n    return node.key\r\n}\r\n\r\nfunction checkComparisonFuncEquality<a>(f1: Comp<a>, f2: Comp<a>): void {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (f1 !== f2) {\r\n            console.warn(\r\n                \"You're merging two sets with different compare functions. This can lead to inconsistent results.\\n\\nConsider using the same comparison function for both sets.\",\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"names":["RBT.EMPTY_NODE","RBT.NonEmptyNode","checkComparisonFuncEquality"],"mappings":"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"}